sections = {
    'introduction': '<h1>An Introduction</h1> <p>We started this project to provide a simple, intuitive, and compelling audio dictionary, targeting Romanians of all ages and occupations, </p> <p> And we developed it further as the project for an university subject, MDS (Software Development Methods). For the better understanding of our project, I say we delve into the project requirements: </p> <ol> <li>Creating user stories and keeping a backlog</li> <li>UML design, pre-implementation</li> <li>Using git, including branches, merges/rebases.</li> <li>Automatic tests (unit or integration)</li> <li>Bug reporting</li> <li>Using a build tool</li> <li>Refactoring and code standards</li> <li>Design patterns</li> </ul>  <h5>1. User Stories and Backlog</h5> <p> The User stories, a backlog, and the current features can be found under the <span class="section">Design and Model</span> section. </p>  <h5>2. UML Design</h5> <p> The UML diagrams, both about the used classes and the processes and communication between them, can be found under the <span class="section">UML</span> section.</p>  <h5>3. Git Repo</h5> <p> The repository can be found at the GitHub user stefaneduard-deaconu, the audioHTML repository, the <i>mds</i> branch. </p> <p> We had a main project that we upgraded while pursuing a better grade, and a better UI and UX. Consequently, we have multiple branches: <i>mds</i>, branched off master, and <i>dev</i>, branched off mds. You can guess the meaning, <i>mds</i> was used for the upgrade, and <i>dev</i> for grouping multiple commits before introducing a working feature.  </p>  <h5>4. Tests</h5> <p> For automatic testing we used the Spectron and Mocha node.js modules. More about this under the <span class="section">Testing</span> section. </p>  <h5>5. Bugs</h5> <p> For bug reporting we used the GitHub integrated issues. We resolved issues (bugs) by creating a new branch that contained the number of the issue, and merging once the bug was fixed. </p>  <h5>6. Building</h5> <p> The entire project was implemented using the electron module, and build using the electron-builder module. Look up <span class="section">Building</span> section. </p>  <h5>7. Refactoring</h5> <p> During the code-writing process we refactored under multiple circumstances. From class renaming, code beautifying, removing code duplicate, reordering code and splitting it into modules, adding comments etc. </p> <p> More about this and a few examples under the <span class="section">Refactoring</span> section </p>  <h5>8. Design Patterns</h5> <p> The design patterns we primary use are the Singleton and ------ patterns. More info and code snippets under the <span class="section">Patterns</span> section </p>',
    'design':
        '<h1>Design and Modelling</h1>    <h2>User stories</h2>  <p>We list below our User Stories:</p> <ol> <li> For a child user, we offer good controls and control tips (tooltips) in both Roumanian and English. </li> <li> An old person may use our application, so this brings us the . of making it simple. Also, we add an option for changing the theme of the application - font-size, font-color, buttons - making everything simple :D. </li> <li> Deoarece utilizatorul nostru utilizeaza un dictionar audio roman-englez tocmai pentru a-si imbunatati in mod cert pronuntia, il sustinem prin a-l face prima data sa treaca de 3-4 ori printr-o inregistrare inainte de a-i oferi acces la transcriptul ei. </li> <li> Avem de-a face cu un roman care frustrat de inadvertentele pronuntiei engleza, are nevoie sa se concentreze pe a-si imbunatati pronuntia. Noi ii oferim posibilitatea de a asculta sectiuni din inregistrarile noastre, puse "pe repeat". </li> <li> Avem o persoana de nationalitate diferita de cea romana, care este interesata in a afla cate ceva despre cultura romana, inclusiv despre limba. Noi le oferim traducerile in romana a gruparilor celor mai comune de cuvinte si expresii. Deja grupate si aranjate. </li> <li> Pentru buna clasificare a inregistrarilor, le vom grupa in grupuri si subgrupuri. Ca astfel utilizatorul care face asocieri de apartanenta - si animalul domestic, si animalul salbatic este un animal, sa fie facilitati in a-si insusi vocabularul. </li> <li> Pentru a aduce o experienta personala utilizatorilor, le lasam optiunea de a schimba ordinea inregistrarilor. Ori de a le regrupa. Astfel, ei isi pot rearanja intr-un mod personal mediul de invatare. </li> <li> For each recording we show a presentation image, a visual, mnemonic  aid, as to activate the visual memory of users, and help them take part into the learning experience. We can add one or more images for each recording, at most making presentations, with simply animated transitions. </li> <li> An expatriate or a citizen working outside of his mother country needs to integrate, by learning the basic of that language. But English pronunciation seems difficult, so our project brings the most used words and their pronunciation right into his hand. All at the press of a click </li> <li> A blind person, or a legally blind person, may want to learn a new language. He would find many difficulties in using a complex system, so we bring a simple solution. A simple, word-to-word set of recordings, grouped logically and semantically. They can be accessed by solely using 4 keys - up, down, left, right arrow keys. </li> </ol>    <h2>The coming aroung of the UI - simplicity</h2> <p>While designing out application, what we most wanted was simplicity.</p> <p>We want our app to achieve the wants of all those other people that aren"t as used to technology, that aren"t as capable as others, blind or legally blind people (from here the need of a "audio" dictionary), young or seniors, great or not as great, but getting there, English speakers, and Romanian speakers. </p>  <h2>Functionalities for the Users</h2>  <p>We provided functionalities for each targeted user:</p>',
    "uml":
        '<h1>UML</h1> <h2>Shapind our work flow</h2> <div style="width: 100%; height: auto; margin-left: 10%;; position: relative;"><iframe allowfullscreen frameborder="0" style="width:640px; height:480px" src="https://www.lucidchart.com/documents/embeddedchart/2b86fc5f-e86e-41b5-addb-2628b2e0c1bd" id="iLhT_IQHgtVn"></iframe></div> <p>We also used Lucidchart in our personal way. We created a so called "Dependency Diagram", with the big tasks we had on our hands, and their priorities.</p> <p>We shaped three priorities, 0, 1, and 2. Each can be viewed as depending on the lower ones. And each priority has a set of "tasks" (hexagons for test-driven and design, quadrilaters for more "regular" code writing).</p>iting). <p>We consider priority 2 solved when all its dependencies are done. We get to the bottom, project done.</p>t done. <h2>Classes diagram</h2> <div style="width: 100%; height: auto; margin-left: 10%;"><iframe allowfullscreen frameborder="0" style="width:640px;height:480px" src="https://www.lucidchart.com/documents/embeddedchart/496ebf33-595a-4ac6-ad54-d4e9485df847" id="vMhTru2FYVsx"></iframe></div> <h2>Processes diagram</h2> <div style="width: 100%; height: auto; margin-left: 10%;"><iframe allowfullscreen frameborder="0" style="width:640px; height:480px" src="https://www.lucidchart.com/documents/embeddedchart/de85a964-dc5c-4d2e-b10e-07ad6dd1093d" id="tPhTjkiSyd6D"></iframe></div>',
    "testing":
        '<h1>Testing</h1> <p> The tests are kept under the tests directory. The app is configured to run all the tests below the directory (and its subdirectories) <i>tests/.</i> </p> <p>All testing happens using the Mocha module for both unit and integration tests, and the Spectron module to access the Electron app.</p>',
    "building":
        '<h1>Building</h1> <p>For building we used the electron-builder module. The building happens using the script "dist". By default, this creates an portable version and a corresponding .msi file. All this setting, plus building for other architectures, can be passed as arguments by modifying the above mentioned script (package.json).</p> <p>So if you have node installed, open your favorite shell and enter "npm run dist".</p>',
    "refactoring":
        '<h1>Refactoring</h1><p>Examples of refactoring can be found on commmits such as the ones on september 12th and september 13th.</p>',
    "patterns":
        '<h1>Patterns</h1><p>The design patterns we used are the <i>Factory</i> and the <i>Singleton</i> patterns. The classes that use them are presented in the UML Class diagram, under section <span class="section">Design and Model</span></p>'
}

function select(event) {
    // get the other to the basic:
    for (div of document.querySelectorAll('.left div')) {
        div.style.backgroundColor = ''
        div.style.color = ''
        div.style.boxShadow = ''
    }
    // keep this one highlighted:
    event.target.style.backgroundColor = 'black'
    event.target.style.color = 'white'
    event.target.style.boxShadow = '1px white'
    // 'load' the page
    document.querySelector('.right').innerHTML = sections[event.target.id]
}
for (section of document.querySelectorAll('.left div')) {
    console.log(section)
    section.onclick = select
}

document.body.onclick = function(event) {
    // get the other to the basic:
    // if (event.target.parentNode.classList.contains('left') == false)
    // for (div of document.querySelectorAll('.left div')) {
    //     div.style.backgroundColor = ''
    //     div.style.color = ''
    //     div.style.boxShadow = ''
    // }
}
